/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Arboltransferencias.Arbol;
import Arboltransferencias.Transferencia;
import ListaCircularDobleServicios.ListaCircularDoble;
import ListaCircularDobleServicios.NodoLCD;
import ListaCircularEjecutivo.ListaCircularSimple;
import ListaCircularEjecutivo.NodoLCS;
import ListaDobleAtencionC.AtencionC;
import ListaDobleAtencionC.ListaDoble;
import ListaDobleAtencionC.NodoLD;
import ListaUsuarios.ListaSimple;
import ListaUsuarios.Nodo;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;

/**
 *
 * @author Jose Ramos
 */
public class Atencionalcliente extends javax.swing.JFrame {

    /**
     * Creates new form Atencionalcliente
     */
    public Atencionalcliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(43, 56, 97));

        jPanel1.setBackground(new java.awt.Color(43, 56, 97));

        jTable3.setBackground(new java.awt.Color(5, 12, 24));
        jTable3.setForeground(new java.awt.Color(255, 255, 255));
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Prioridad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jButton1.setBackground(new java.awt.Color(5, 12, 24));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Actualizar");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        jPanel2.setBackground(new java.awt.Color(43, 56, 97));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        jTable1.setBackground(new java.awt.Color(5, 12, 24));
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ejecutivo", "Estado"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setBackground(new java.awt.Color(5, 12, 24));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Atender");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(80, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        jPanel3.setBackground(new java.awt.Color(43, 56, 97));

        jTable2.setBackground(new java.awt.Color(5, 12, 24));
        jTable2.setForeground(new java.awt.Color(255, 255, 255));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ejecutivo", "Servicio", "Cliente", "Servicio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jButton3.setBackground(new java.awt.Color(5, 12, 24));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Resolver");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(179, 179, 179))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        jPanel4.setBackground(new java.awt.Color(255, 204, 51));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Atencion de Casos");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(396, 396, 396)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        ListaSimple LS = new ListaSimple();
        try {
            FileInputStream miArchivo2;
            miArchivo2 = new FileInputStream("usuario.su");
            ObjectInputStream input = new ObjectInputStream(miArchivo2);
            ListaSimple vLS = (ListaSimple) input.readObject();
            input.close();
            LS = vLS;
            miArchivo2.close();
        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());

        }
        ListaCircularSimple LCS = new ListaCircularSimple();
        try {
            FileInputStream miArchivo2;
            miArchivo2 = new FileInputStream("Ejecutivo.su");
            ObjectInputStream input = new ObjectInputStream(miArchivo2);
            ListaCircularSimple vLCS = (ListaCircularSimple) input.readObject();
            input.close();
            LCS = vLCS;
            miArchivo2.close();
        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());

        }
        ListaDoble LD = new ListaDoble();
        try {
            FileInputStream miArchivo2;
            miArchivo2 = new FileInputStream("Atencion.su");
            ObjectInputStream input = new ObjectInputStream(miArchivo2);
            ListaDoble vLD = (ListaDoble) input.readObject();
            input.close();
            miArchivo2.close();
            LD = vLD;
        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());
        }
        this.mostrarLD(LD);
        this.mostrarLC(LCS);
        this.mostrarC(LS);
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        ListaSimple LS = new ListaSimple();
        try {
            FileInputStream miArchivo2;
            miArchivo2 = new FileInputStream("usuario.su");
            ObjectInputStream input = new ObjectInputStream(miArchivo2);
            ListaSimple vLS = (ListaSimple) input.readObject();
            input.close();
            LS = vLS;
            miArchivo2.close();
        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());
        }
        Nodo Usuario = LS.getPrimero();
        ListaCircularSimple LCS = new ListaCircularSimple();
        try {
            FileInputStream miArchivo2;
            miArchivo2 = new FileInputStream("Ejecutivo.su");
            ObjectInputStream input = new ObjectInputStream(miArchivo2);
            ListaCircularSimple vLCS = (ListaCircularSimple) input.readObject();
            input.close();
            LCS = vLCS;
            miArchivo2.close();
        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());
        }
        NodoLCS actual = LCS.getPrimero();
        NodoLCS Ejecutivo = null;
        if (LS.getCantNodos() != 0) {
            do {
                if (actual.getEjecutivo().getEstado().equals("Disponible")) {
                    Ejecutivo = actual;
                    actual.getEjecutivo().setEstado("Ocupado");
                    try {
                        FileOutputStream miArchivo = new FileOutputStream("Ejecutivo.su");
                        ObjectOutputStream output = new ObjectOutputStream(miArchivo);
                        output.writeObject(LCS);
                        output.close();
                        miArchivo.close();
                        JOptionPane.showMessageDialog(null, "Se registró correctamente en el Ejecutivo");
                        LCS.listar();

                    } catch (Exception ex) {
                        System.out.println("Exception: " + ex.getMessage());
                    }
                    LS.RMPrimero();
                    try {
                        FileOutputStream miArchivo = new FileOutputStream("usuario.su");
                        ObjectOutputStream output = new ObjectOutputStream(miArchivo);
                        output.writeObject(LS);
                        output.close();
                        miArchivo.close();
                        JOptionPane.showMessageDialog(null, "Se registró correctamente el usuario");
                        LS.listar();

                    } catch (Exception ex) {
                        System.out.println("Exception: " + ex.getMessage());
                    }
                    this.mostrarLC(LCS);
                    this.mostrarC(LS);
                    actual = LCS.getPrimero();
                } else {
                    actual = actual.getSiguiente();
                }
            } while (actual != LCS.getPrimero());
            ListaCircularDoble LCD = new ListaCircularDoble();
            try {
                FileInputStream miArchivo2;
                miArchivo2 = new FileInputStream("Servicios.su");
                ObjectInputStream input = new ObjectInputStream(miArchivo2);
                ListaCircularDoble vLCD = (ListaCircularDoble) input.readObject();
                input.close();
                miArchivo2.close();
                LCD = vLCD;
            } catch (Exception ex) {
                System.out.println("Exception: " + ex.getMessage());
            }
            NodoLCD aux = LCD.getPrimero();
            NodoLCD Servicio = null;
            DateTimeFormatter dtf3 = DateTimeFormatter.ofPattern("yyyy/MMMM/dd HH:mm:ss");
            String fyh = "" + dtf3.format(LocalDateTime.now());

            do {
                if (aux.getServicios().getNombre().equals(Usuario.getUsuario().getTipodeTransaccion())) {
                    Servicio = aux;
                }else if(aux.getServicios().getCodigo()==1000){
                    Servicio = aux;
                }

                aux = aux.getSiguiente();
            } while (aux != LCD.getPrimero());
            aux = LCD.getPrimero();
            ListaDoble LD = new ListaDoble();
            try {
                FileInputStream miArchivo2;
                miArchivo2 = new FileInputStream("Atencion.su");
                ObjectInputStream input = new ObjectInputStream(miArchivo2);
                ListaDoble vLD = (ListaDoble) input.readObject();
                input.close();
                miArchivo2.close();
                LD = vLD;
            } catch (Exception ex) {
                System.out.println("Exception: " + ex.getMessage());
            }
            LD.insertarFInal(new AtencionC(Usuario.getUsuario(), Ejecutivo.getEjecutivo(), fyh, Servicio.getServicios()));
            try {
                FileOutputStream miArchivo = new FileOutputStream("Atencion.su");
                ObjectOutputStream output = new ObjectOutputStream(miArchivo);
                output.writeObject(LD);
                output.close();
                miArchivo.close();
                JOptionPane.showMessageDialog(null, "Se registró correctamente el tramite");
                LD.listarAdelante();

            } catch (Exception ex) {
                System.out.println("Exception: " + ex.getMessage());
            }
            try {
                FileInputStream miArchivo2;
                miArchivo2 = new FileInputStream("Atencion.su");
                ObjectInputStream input = new ObjectInputStream(miArchivo2);
                ListaDoble vLD = (ListaDoble) input.readObject();
                input.close();
                miArchivo2.close();
                LD = vLD;
            } catch (Exception ex) {
                System.out.println("Exception: " + ex.getMessage());
            }
            this.mostrarLD(LD);
        }else{
            JOptionPane.showMessageDialog(this, "No hay usuarios que atender");
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        ListaDoble LD = new ListaDoble();
        try {
            FileInputStream miArchivo2;
            miArchivo2 = new FileInputStream("Atencion.su");
            ObjectInputStream input = new ObjectInputStream(miArchivo2);
            ListaDoble vLD = (ListaDoble) input.readObject();
            input.close();
            miArchivo2.close();
            LD = vLD;
        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());
        }
        Arbol arbol = new Arbol();
        int contid = 0;
        try {
            FileInputStream miArchivo2;
            miArchivo2 = new FileInputStream("Transferencia.su");
            ObjectInputStream input = new ObjectInputStream(miArchivo2);
            Arbol varbol = (Arbol) input.readObject();
            int vcontid = (int) input.readObject();
            input.close();
            miArchivo2.close();
            arbol = varbol;
            contid = vcontid;
        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());
        }
        NodoLD actual = LD.getPrimero();
        if (LD.esVacia()) {
            System.out.println("La lista esta vacia");

        } else {
            while (actual != null) {
                contid++;
                arbol.insertar(new Transferencia(
                        actual.getAtencionC().getUsuario(),
                        actual.getAtencionC().getEjecutivo(),
                        actual.getAtencionC().getFechayHora(),
                        actual.getAtencionC().getServicio(), contid
                ));
                actual = actual.getSiguiente();
            }
        }
        try {
            FileOutputStream miArchivo = new FileOutputStream("Transferencia.su");
            ObjectOutputStream output = new ObjectOutputStream(miArchivo);
            output.writeObject(arbol);
            output.writeObject(contid);
            output.close();
            miArchivo.close();
            JOptionPane.showMessageDialog(null, "Se transfirio correctamente los datos al modulo de transferencia");
            arbol.listarInOrder();

        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());
        }
        try {
            FileOutputStream miArchivo = new FileOutputStream("Atencion.su");
            ObjectOutputStream output = new ObjectOutputStream(miArchivo);
            output.writeObject(LD);
            output.close();
            miArchivo.close();
            LD.listarAdelante();

        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());
        }
        if (LD.esVacia()) {
            System.out.println("La lista esta vacia");

        } else {
            ListaDoble vaciar = new ListaDoble();
            LD = vaciar;
        }
        this.mostrarLD(LD);
        ListaCircularSimple LCS = new ListaCircularSimple();
        try {
            FileInputStream miArchivo2;
            miArchivo2 = new FileInputStream("Ejecutivo.su");
            ObjectInputStream input = new ObjectInputStream(miArchivo2);
            ListaCircularSimple vLCS = (ListaCircularSimple) input.readObject();
            input.close();
            LCS = vLCS;
            miArchivo2.close();
        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());
        }
        NodoLCS aux = LCS.getPrimero();
        do {
            if (aux.getEjecutivo().getEstado().equals("Ocupado")) {
                aux.getEjecutivo().setEstado("Disponible");
                aux.getEjecutivo().setNombre_Cliente("");
                this.mostrarLC(LCS);
            }
            aux = aux.getSiguiente();

        } while (aux != LCS.getPrimero());
        try {
            FileOutputStream miArchivo = new FileOutputStream("Ejecutivo.su");
            ObjectOutputStream output = new ObjectOutputStream(miArchivo);
            output.writeObject(LCS);
            output.close();
            miArchivo.close();
            JOptionPane.showMessageDialog(null, "Se registró correctamente en el Ejecutivo");
            LCS.listar();

        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());
        }

        try {
            FileOutputStream miArchivo = new FileOutputStream("Atencion.su");
            ObjectOutputStream output = new ObjectOutputStream(miArchivo);
            output.writeObject(LD);
            output.close();
            miArchivo.close();
            JOptionPane.showMessageDialog(null, "Se registró correctamente el tramite");
            LD.listarAdelante();

        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());
        }

    }//GEN-LAST:event_jButton3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Atencionalcliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Atencionalcliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Atencionalcliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Atencionalcliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Atencionalcliente().setVisible(true);
            }
        });
    }

    public void mostrarC(ListaSimple LS) {
        String matriz[][] = new String[LS.getCantNodos()][2];
        for (int i = 0; i < LS.getCantNodos(); i++) {
            matriz[i][0] = LS.getPrimero().getUsuario().getName() + " " + LS.getPrimero().getUsuario().getApellido();
            matriz[i][1] = LS.getPrimero().getUsuario().getPrioridad();
            LS.setPrimero(LS.getPrimero().getSiguiente());
        }

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
                matriz,
                new String[]{
                    "Nombre", "Prioridad"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

    }

    public void mostrarLD(ListaDoble LD) {
        String matriz[][] = new String[LD.getCantNodos()][4];
        for (int i = 0; i < LD.getCantNodos(); i++) {
            matriz[i][0] = LD.getPrimero().getAtencionC().getEjecutivo().getNombre();
            matriz[i][1] = LD.getPrimero().getAtencionC().getUsuario().getName();
            matriz[i][2] = LD.getPrimero().getAtencionC().getServicio().getNombre();
            matriz[i][3] = LD.getPrimero().getAtencionC().getFechayHora();
            LD.setPrimero(LD.getPrimero().getSiguiente());
        }

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
                matriz,
                new String[]{
                    "Ejecutivo", "Cliente", "Servicio", "Fecha"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

    }

    public void mostrarLC(ListaCircularSimple LCS) {
        String matriz[][] = new String[LCS.getCantNodos()][2];
        for (int i = 0; i < LCS.getCantNodos(); i++) {
            matriz[i][0] = LCS.getPrimero().getEjecutivo().getNombre();
            matriz[i][1] = LCS.getPrimero().getEjecutivo().getEstado();
            LCS.setPrimero(LCS.getPrimero().getSiguiente());
        }

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                matriz,
                new String[]{
                    "Nombre", "Estado"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}
